import { useState } from "react";
import { Game } from "@shared/types";
import { Loader2, Shield, Sword } from "lucide-react";
import HeaderDashboard from "@/components/HeaderDashboard";
import JuniorAgentGame from "@/components/JuniorAgentGame";
import CyberSafetyQuiz from "@/components/CyberSafetyQuiz";
import CyberHeroRPG from "@/components/CyberHeroRPG";
import { Button } from "@/components/ui/button";
import { Helmet } from "react-helmet";




const Quizz = ({ onClose }: { onClose: () => void }) => {
  const [activeCategory, setActiveCategory] = useState(0);
  const [questions, setQuestions] = useState(() => shuffleArray(quizData[0].questions));
  const [current, setCurrent] = useState(0);
  const [selected, setSelected] = useState<number | null>(null);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [userAnswers, setUserAnswers] = useState<(number | null)[]>([]);

  const handleCategoryChange = (idx: number) => {
    setActiveCategory(idx);
    setQuestions(shuffleArray(quizData[idx].questions));
    setCurrent(0);
    setScore(0);
    setSelected(null);
    setShowResult(false);
    setUserAnswers([]);
  };

  const handleSelect = (idx: number) => {
    setSelected(idx);
  };

  const handleNext = () => {
    const updatedAnswers = [...userAnswers];
    updatedAnswers[current] = selected;
    setUserAnswers(updatedAnswers);
    if (selected === questions[current].answer) {
      setScore(score + 1);
    }
    setSelected(null);
    if (current < questions.length - 1) {
      setCurrent(current + 1);
    } else {
      setShowResult(true);
    }
  };

  const handleRestart = () => {
    setCurrent(0);
    setScore(0);
    setSelected(null);
    setShowResult(false);
    setUserAnswers([]);
  };

  return (
    <>
      <style>{`
        .quiz-modal-scroll::-webkit-scrollbar {
          width: 8px;
        }
        .quiz-modal-scroll::-webkit-scrollbar-thumb {
          background: #d1d5db;
          border-radius: 8px;
        }
        .quiz-modal-scroll::-webkit-scrollbar-track {
          background: transparent;
        }
        .quiz-modal-scroll {
          scrollbar-width: thin;
          scrollbar-color: #d1d5db transparent;
        }
      `}</style>
      <div className="fixed inset-0 z-[200] flex items-center justify-center bg-black/30 backdrop-blur-sm">
        <div className="quiz-modal-scroll relative max-w-xl w-full mx-auto bg-gradient-to-br from-blue-100 via-purple-100 to-pink-100 rounded-3xl shadow-2xl p-8 overflow-y-auto max-h-screen">
          <button
            className="absolute top-4 right-4 text-gray-400 hover:text-primary text-2xl font-bold"
            aria-label="Close Quiz"
            onClick={onClose}
          >
            √ó
          </button>
          <h2 className="text-3xl font-bold text-center mb-6 text-purple-700">Cyber Safety Quiz</h2>
          <div className="flex flex-wrap justify-center mb-8 gap-2 w-full">
            {quizData.map((cat: any, idx: number) => {
              const colors = [
                { active: "bg-red-600 text-white border-red-600", inactive: "bg-white text-red-700 hover:bg-red-100 border-red-300" },
                { active: "bg-green-600 text-white border-green-600", inactive: "bg-white text-green-700 hover:bg-green-100 border-green-300" },
                { active: "bg-blue-600 text-white border-blue-600", inactive: "bg-white text-blue-700 hover:bg-blue-100 border-blue-300" },
                { active: "bg-yellow-500 text-white border-yellow-500", inactive: "bg-white text-yellow-700 hover:bg-yellow-100 border-yellow-300" }
              ];
              const color = colors[idx % colors.length];
              return (
                <button
                  key={cat.category}
                  onClick={() => handleCategoryChange(idx)}
                  className={`min-w-[140px] max-w-full px-2 py-2 text-sm rounded-full font-semibold transition-all border-2 whitespace-normal break-words ${activeCategory === idx ? color.active : color.inactive}`}
                  style={{ wordBreak: 'break-word' }}
                >
                  {cat.category.split(":")[0]}
                </button>
              );
            })}
          </div>
          {!showResult ? (
            <div>
              <div className="mb-2 text-sm text-gray-500">{quizData[activeCategory].category} - {questions[current].difficulty}</div>
              <div className="font-semibold mb-4 text-gray-700">{current + 1}. {questions[current].question}</div>
              <div className="space-y-2 mb-6">
                {questions[current].choices.map((choice: string, idx: number) => (
                  <label key={idx} className={`flex items-center gap-2 p-2 rounded-lg cursor-pointer transition-all ${selected === idx ? "bg-purple-200" : "hover:bg-purple-100"}`}>
                    <input
                      type="radio"
                      name="answer"
                      checked={selected === idx}
                      onChange={() => handleSelect(idx)}
                      className="accent-purple-500"
                    />
                    <span className="font-bold mr-2">{String.fromCharCode(65 + idx)}.</span> {choice}
                  </label>
                ))}
              </div>
              <button
                onClick={handleNext}
                disabled={selected === null}
                className="w-full bg-purple-600 text-white font-bold py-3 rounded-full mt-6 hover:bg-purple-700 transition-all disabled:opacity-50"
              >
                {current < questions.length - 1 ? "Next" : "See Results"}
              </button>
            </div>
          ) : (
            <div className="text-center relative">
              {score / questions.length >= 0.8 && <div className="absolute inset-0 pointer-events-none"><img src="/confetti.gif" alt="Confetti" /></div>}
              <div className="text-2xl font-bold mb-4 text-purple-700">Quiz Complete!</div>
              <div className="text-lg mb-2">Your Score: <span className="font-bold">{score} / {questions.length}</span></div>
              {score / questions.length >= 0.8 && (
                <div className="text-green-700 font-bold text-xl mb-4">üéâ Amazing! You're a cyber safety star!</div>
              )}
              {score / questions.length < 0.5 && (
                <div className="text-red-700 font-bold text-xl mb-4">üòî Oops! Keep practicing and you'll get better!</div>
              )}
              <div className="mt-6 text-left">
                <h3 className="text-lg font-semibold mb-2 text-purple-700">Your Answers:</h3>
                <ul className="space-y-4">
                  {questions.map((q: any, idx: number) => {
                    const userAnswer = userAnswers[idx];
                    const isCorrect = userAnswer === q.answer;
                    return (
                      <li key={idx} className={`p-4 rounded-xl ${isCorrect ? "bg-green-100" : "bg-red-100"}`}>
                        <div className="font-semibold">{idx + 1}. {q.question}</div>
                        <div className="mt-1">Your answer: <span className="font-bold">{userAnswer !== undefined && userAnswer !== null ? `${String.fromCharCode(65 + userAnswer)}. ${q.choices[userAnswer]}` : "No answer"}</span></div>
                        <div className="mt-1">{isCorrect ? "‚úÖ Correct!" : <>‚ùå Correct answer: <span className="font-bold">{`${String.fromCharCode(65 + q.answer)}. ${q.choices[q.answer]}`}</span></>}</div>
                      </li>
                    );
                  })}
                </ul>
              </div>
              <button
                onClick={handleRestart}
                className="bg-purple-600 text-white font-bold py-2 px-6 rounded-full mt-4 hover:bg-purple-700 transition-all"
              >
                Try Again
              </button>
              <button
                onClick={onClose}
                className="bg-gray-300 text-gray-700 font-bold py-2 px-6 rounded-full mt-4 hover:bg-gray-400 transition-all ml-2"
              >
                Close
              </button>
            </div>
          )}
        </div>
      </div>
    </>
  );
};

// Digital Footprint Game Modal
function DigitalFootprintGameModal({ onClose }) {
  const [gamePhase, setGamePhase] = useState<'intro' | 'profile' | 'feed' | 'apps' | 'opportunities' | 'results'>('intro');
  const [currentYear, setCurrentYear] = useState(1);
  const [reputation, setReputation] = useState(50);
  const [digitalFootprint, setDigitalFootprint] = useState<'green' | 'yellow' | 'red'>('green');
  const [footprintHistory, setFootprintHistory] = useState<string[]>([]);
  const [selectedPosts, setSelectedPosts] = useState<number[]>([]);
  const [selectedApps, setSelectedApps] = useState<number[]>([]);
  const [unlockedOpportunities, setUnlockedOpportunities] = useState<number[]>([]);
  const [gameLog, setGameLog] = useState<string[]>([]);

  const addToLog = (message: string) => {
    setGameLog(prev => [...prev, `Year ${currentYear}: ${message}`]);
  };

  const updateFootprint = (newEntries: string[]) => {
    const allEntries = [...footprintHistory, ...newEntries];
    setFootprintHistory(allEntries);

    const redCount = allEntries.filter(f => f === 'red').length;
    const yellowCount = allEntries.filter(f => f === 'yellow').length;
    const greenCount = allEntries.filter(f => f === 'green').length;

    if (redCount > yellowCount + greenCount) {
      setDigitalFootprint('red');
    } else if (yellowCount > greenCount || redCount > 0) {
      setDigitalFootprint('yellow');
    } else {
      setDigitalFootprint('green');
    }
  };

  const handlePostSelection = (postId: number) => {
    const posts = [
      {
        id: 1,
        content: "Just got an A+ on my math test! So proud of myself! üéâ",
        consequences: { reputation: 15, footprint: 'green' as const }
      },
      {
        id: 2,
        content: "At the beach with my family! Perfect day! üèñÔ∏è [Photo of family at beach]",
        consequences: { reputation: 5, footprint: 'yellow' as const }
      },
      {
        id: 3,
        content: "I hate this teacher! She gave us so much homework! üò°",
        consequences: { reputation: -20, footprint: 'red' as const }
      },
      {
        id: 4,
        content: "Check out this funny video I found! https://randomsite.com/funny-video",
        consequences: { reputation: -10, footprint: 'red' as const }
      },
      {
        id: 5,
        content: "My phone number is 555-0123 if anyone wants to text me!",
        consequences: { reputation: -25, footprint: 'red' as const }
      },
      {
        id: 6,
        content: "Working on a school project about recycling. Anyone have good ideas?",
        consequences: { reputation: 10, footprint: 'green' as const }
      }
    ];

    const post = posts.find(p => p.id === postId);
    if (!post) return;

    setSelectedPosts(prev => {
      const newSelection = prev.includes(postId)
        ? prev.filter(id => id !== postId)
        : [...prev, postId];

      const reputationChange = prev.includes(postId)
        ? -post.consequences.reputation
        : post.consequences.reputation;

      setReputation(current => Math.max(0, Math.min(100, current + reputationChange)));
      updateFootprint(prev.includes(postId)
        ? []
        : [post.consequences.footprint]);

      addToLog(prev.includes(postId)
        ? `Removed post: "${post.content.substring(0, 30)}..."`
        : `Posted: "${post.content.substring(0, 30)}..."`);

      return newSelection;
    });
  };

  const handleAppSelection = (appId: number) => {
    const apps = [
      {
        id: 1,
        name: "SafeChat",
        privacyRisk: 'low' as const,
        reputationChange: 2
      },
      {
        id: 2,
        name: "SocialSnap",
        privacyRisk: 'high' as const,
        reputationChange: -8
      },
      {
        id: 3,
        name: "StudyBuddy",
        privacyRisk: 'medium' as const,
        reputationChange: -4
      },
      {
        id: 4,
        name: "GameZone",
        privacyRisk: 'high' as const,
        reputationChange: -8
      }
    ];

    const app = apps.find(a => a.id === appId);
    if (!app) return;

    setSelectedApps(prev => {
      const newSelection = prev.includes(appId)
        ? prev.filter(id => id !== appId)
        : [...prev, appId];

      const reputationChange = prev.includes(appId)
        ? -app.reputationChange
        : app.reputationChange;

      setReputation(current => Math.max(0, Math.min(100, current + reputationChange)));

      const footprintColor = app.privacyRisk === 'high' ? 'red' : app.privacyRisk === 'medium' ? 'yellow' : 'green';
      updateFootprint(prev.includes(appId)
        ? []
        : [footprintColor]);

      addToLog(prev.includes(appId)
        ? `Disconnected from ${app.name}`
        : `Connected ${app.name} app`);

      return newSelection;
    });
  };

  const checkOpportunities = () => {
    const opportunities = [
      {
        id: 1,
        name: "Student Council President",
        requirements: { minReputation: 70, maxRisk: 20 }
      },
      {
        id: 2,
        name: "Summer Internship",
        requirements: { minReputation: 60, maxRisk: 15 }
      },
      {
        id: 3,
        name: "Sports Team Captain",
        requirements: { minReputation: 50, maxRisk: 25 }
      },
      {
        id: 4,
        name: "Academic Scholarship",
        requirements: { minReputation: 80, maxRisk: 10 }
      }
    ];

    const newlyUnlocked = opportunities.filter(opp => {
      const alreadyUnlocked = unlockedOpportunities.includes(opp.id);
      const meetsRequirements =
        reputation >= opp.requirements.minReputation &&
        footprintHistory.filter(f => f === 'red').length <= opp.requirements.maxRisk;

      return !alreadyUnlocked && meetsRequirements;
    });

    if (newlyUnlocked.length > 0) {
      setUnlockedOpportunities(prev => [...prev, ...newlyUnlocked.map(opp => opp.id)]);
      newlyUnlocked.forEach(opp => {
        addToLog(`üéâ Unlocked: ${opp.name}!`);
      });
    }
  };

  const nextPhase = () => {
    if (gamePhase === 'intro') {
      setGamePhase('profile');
    } else if (gamePhase === 'profile') {
      setGamePhase('feed');
    } else if (gamePhase === 'feed') {
      setGamePhase('apps');
    } else if (gamePhase === 'apps') {
      setGamePhase('opportunities');
      checkOpportunities();
    } else if (gamePhase === 'opportunities') {
      if (currentYear < 3) {
        setCurrentYear(current => current + 1);
        setGamePhase('feed');
        setSelectedPosts([]);
        setSelectedApps([]);
      } else {
        setGamePhase('results');
      }
    }
  };

  const getFootprintColor = () => {
    switch (digitalFootprint) {
      case 'green': return 'text-green-600 bg-green-100';
      case 'yellow': return 'text-yellow-600 bg-yellow-100';
      case 'red': return 'text-red-600 bg-red-100';
    }
  };

  const getReputationColor = () => {
    if (reputation >= 70) return 'text-green-600';
    if (reputation >= 40) return 'text-yellow-600';
    return 'text-red-600';
  };

  return (
    <div className="fixed inset-0 z-[200] flex items-center justify-center bg-black/30 backdrop-blur-sm">
      <div className="relative max-w-4xl w-full mx-auto bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 rounded-3xl shadow-2xl p-8 overflow-y-auto max-h-screen">
        <button
          className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 text-2xl font-bold"
          onClick={onClose}
        >
          √ó
        </button>

        {/* Header */}
        <div className="text-center mb-6">
          <h2 className="text-3xl font-bold text-purple-700 mb-2">Digital Footprint Adventure</h2>
          <div className="flex justify-center items-center gap-4 mb-4">
            <span className="text-lg font-semibold">Year {currentYear} of 3</span>
            <div className={`px-3 py-1 rounded-full font-bold ${getFootprintColor()}`}>
              Footprint: {digitalFootprint.toUpperCase()}
            </div>
            <div className={`text-xl font-bold ${getReputationColor()}`}>
              Reputation: {reputation}
            </div>
          </div>
        </div>

        {/* Game Content */}
        {gamePhase === 'intro' && (
          <div className="text-center">
            <h3 className="text-2xl font-bold mb-4">Welcome to Your Digital Journey!</h3>
            <p className="text-lg mb-6">
              You're about to embark on a 3-year adventure managing your online presence.
              Every choice you make will create a digital footprint that affects your future opportunities.
            </p>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className="bg-green-100 p-4 rounded-xl">
                <CheckCircle className="w-8 h-8 text-green-600 mx-auto mb-2" />
                <h4 className="font-bold text-green-700">Positive Actions</h4>
                <p className="text-sm text-green-600">Build your reputation and unlock opportunities</p>
              </div>
              <div className="bg-yellow-100 p-4 rounded-xl">
                <AlertTriangle className="w-8 h-8 text-yellow-600 mx-auto mb-2" />
                <h4 className="font-bold text-yellow-700">Risky Actions</h4>
                <p className="text-sm text-yellow-600">May affect your digital safety</p>
              </div>
              <div className="bg-red-100 p-4 rounded-xl">
                <X className="w-8 h-8 text-red-600 mx-auto mb-2" />
                <h4 className="font-bold text-red-700">Dangerous Actions</h4>
                <p className="text-sm text-red-600">Can harm your reputation and opportunities</p>
              </div>
            </div>
            <button
              onClick={nextPhase}
              className="bg-purple-600 text-white font-bold py-3 px-8 rounded-full hover:bg-purple-700 transition-all"
            >
              Start Your Journey
            </button>
          </div>
        )}

        {gamePhase === 'profile' && (
          <div className="text-center">
            <h3 className="text-2xl font-bold mb-4">Create Your Digital Profile</h3>
            <p className="text-lg mb-6">Your profile is the foundation of your online presence.</p>
            <div className="bg-white rounded-xl p-6 shadow-lg mb-6">
              <div className="w-20 h-20 bg-purple-200 rounded-full mx-auto mb-4 flex items-center justify-center">
                <Users className="w-10 h-10 text-purple-600" />
              </div>
              <h4 className="text-xl font-bold mb-2">Alex Thompson</h4>
              <p className="text-gray-600 mb-4">Middle School Student | Age 13</p>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <strong>Interests:</strong> Gaming, Sports, Art
                </div>
                <div>
                  <strong>Goals:</strong> Good grades, Make friends, Learn new things
                </div>
              </div>
            </div>
            <button
              onClick={nextPhase}
              className="bg-purple-600 text-white font-bold py-3 px-8 rounded-full hover:bg-purple-700 transition-all"
            >
              Continue
            </button>
          </div>
        )}

        {gamePhase === 'feed' && (
          <div>
            <h3 className="text-2xl font-bold mb-4">Manage Your Social Media Feed</h3>
            <p className="text-lg mb-6">Choose what to post. Each post creates part of your digital footprint!</p>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              {[
                { id: 1, content: "Just got an A+ on my math test! So proud of myself! üéâ", footprint: 'green' as const },
                { id: 2, content: "At the beach with my family! Perfect day! üèñÔ∏è [Photo of family at beach]", footprint: 'yellow' as const },
                { id: 3, content: "I hate this teacher! She gave us so much homework! üò°", footprint: 'red' as const },
                { id: 4, content: "Check out this funny video I found! https://randomsite.com/funny-video", footprint: 'red' as const },
                { id: 5, content: "My phone number is 555-0123 if anyone wants to text me!", footprint: 'red' as const },
                { id: 6, content: "Working on a school project about recycling. Anyone have good ideas?", footprint: 'green' as const }
              ].map(post => (
                <div
                  key={post.id}
                  className={`p-4 rounded-xl border-2 cursor-pointer transition-all ${
                    selectedPosts.includes(post.id)
                      ? `border-${post.footprint === 'green' ? 'green' : post.footprint === 'yellow' ? 'yellow' : 'red'}-400 bg-${post.footprint === 'green' ? 'green' : post.footprint === 'yellow' ? 'yellow' : 'red'}-50`
                      : 'border-gray-200 bg-white hover:border-gray-300'
                  }`}
                  onClick={() => handlePostSelection(post.id)}
                >
                  <div className="flex items-start gap-3">
                    <div className={`w-3 h-3 rounded-full mt-2 ${
                      post.footprint === 'green' ? 'bg-green-500' :
                      post.footprint === 'yellow' ? 'bg-yellow-500' : 'bg-red-500'
                    }`} />
                    <div className="flex-1">
                      <p className="font-medium mb-2">{post.content}</p>
                      <div className="flex items-center gap-2 text-sm text-gray-600">
                        <span className={`px-2 py-1 rounded-full text-xs font-bold ${
                          post.footprint === 'green' ? 'bg-green-100 text-green-700' :
                          post.footprint === 'yellow' ? 'bg-yellow-100 text-yellow-700' :
                          'bg-red-100 text-red-700'
                        }`}>
                          {post.footprint.toUpperCase()} RISK
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            <button
              onClick={nextPhase}
              className="bg-purple-600 text-white font-bold py-3 px-8 rounded-full hover:bg-purple-700 transition-all"
            >
              Continue to Apps
            </button>
          </div>
        )}

        {gamePhase === 'apps' && (
          <div>
            <h3 className="text-2xl font-bold mb-4">Connect Apps & Services</h3>
            <p className="text-lg mb-6">Choose which apps to connect. Some collect more data than others!</p>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              {[
                { id: 1, name: "SafeChat", privacyRisk: 'low' as const, description: "A privacy-focused messaging app" },
                { id: 2, name: "SocialSnap", privacyRisk: 'high' as const, description: "Popular photo sharing platform" },
                { id: 3, name: "StudyBuddy", privacyRisk: 'medium' as const, description: "Educational networking app" },
                { id: 4, name: "GameZone", privacyRisk: 'high' as const, description: "Gaming and social platform" }
              ].map(app => (
                <div
                  key={app.id}
                  className={`p-4 rounded-xl border-2 cursor-pointer transition-all ${
                    selectedApps.includes(app.id)
                      ? `border-${app.privacyRisk === 'low' ? 'green' : app.privacyRisk === 'medium' ? 'yellow' : 'red'}-400 bg-${app.privacyRisk === 'low' ? 'green' : app.privacyRisk === 'medium' ? 'yellow' : 'red'}-50`
                      : 'border-gray-200 bg-white hover:border-gray-300'
                  }`}
                  onClick={() => handleAppSelection(app.id)}
                >
                  <div className="flex items-start gap-3">
                    <Smartphone className={`w-6 h-6 mt-1 ${
                      app.privacyRisk === 'low' ? 'text-green-600' :
                      app.privacyRisk === 'medium' ? 'text-yellow-600' :
                      'text-red-600'
                    }`} />
                    <div className="flex-1">
                      <h4 className="font-bold mb-1">{app.name}</h4>
                      <p className="text-sm text-gray-600 mb-2">{app.description}</p>
                      <div className="flex items-center gap-2 mb-2">
                        <span className={`px-2 py-1 rounded-full text-xs font-bold ${
                          app.privacyRisk === 'low' ? 'bg-green-100 text-green-700' :
                          app.privacyRisk === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                          'bg-red-100 text-red-700'
                        }`}>
                          {app.privacyRisk.toUpperCase()} PRIVACY RISK
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            <button
              onClick={nextPhase}
              className="bg-purple-600 text-white font-bold py-3 px-8 rounded-full hover:bg-purple-700 transition-all"
            >
              See Opportunities
            </button>
          </div>
        )}

        {gamePhase === 'opportunities' && (
          <div>
            <h3 className="text-2xl font-bold mb-4">Available Opportunities</h3>
            <p className="text-lg mb-6">Based on your digital footprint, here are the opportunities available to you:</p>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              {[
                { id: 1, name: "Student Council President", type: 'school', requirements: { minReputation: 70, maxRisk: 20 } },
                { id: 2, name: "Summer Internship", type: 'career', requirements: { minReputation: 60, maxRisk: 15 } },
                { id: 3, name: "Sports Team Captain", type: 'personal', requirements: { minReputation: 50, maxRisk: 25 } },
                { id: 4, name: "Academic Scholarship", type: 'school', requirements: { minReputation: 80, maxRisk: 10 } }
              ].map(opp => {
                const isUnlocked = unlockedOpportunities.includes(opp.id);
                const canUnlock =
                  reputation >= opp.requirements.minReputation &&
                  footprintHistory.filter(f => f === 'red').length <= opp.requirements.maxRisk;

                return (
                  <div
                    key={opp.id}
                    className={`p-4 rounded-xl border-2 ${
                      isUnlocked
                        ? 'border-green-400 bg-green-50'
                        : canUnlock
                        ? 'border-yellow-400 bg-yellow-50'
                        : 'border-gray-200 bg-gray-50'
                    }`}
                  >
                    <div className="flex items-start gap-3">
                      <div className={`w-3 h-3 rounded-full mt-2 ${
                        isUnlocked ? 'bg-green-500' :
                        canUnlock ? 'bg-yellow-500' : 'bg-gray-400'
                      }`} />
                      <div className="flex-1">
                        <h4 className="font-bold mb-1">{opp.name}</h4>
                        <p className="text-sm text-gray-600 mb-2">{opp.type} opportunity</p>
                        <div className="text-xs space-y-1">
                          <div><strong>Min Reputation:</strong> {opp.requirements.minReputation}</div>
                          <div><strong>Max Risk:</strong> {opp.requirements.maxRisk} red marks</div>
                          {isUnlocked && (
                            <div className="text-green-600 font-bold">‚úÖ UNLOCKED!</div>
                          )}
                          {!isUnlocked && canUnlock && (
                            <div className="text-yellow-600 font-bold">‚ö†Ô∏è Almost there!</div>
                          )}
                          {!isUnlocked && !canUnlock && (
                            <div className="text-red-600 font-bold">‚ùå Requirements not met</div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>

            <button
              onClick={nextPhase}
              className="bg-purple-600 text-white font-bold py-3 px-8 rounded-full hover:bg-purple-700 transition-all"
            >
              {currentYear < 3 ? 'Next Year' : 'See Final Results'}
            </button>
          </div>
        )}

        {gamePhase === 'results' && (
          <div className="text-center">
            <h3 className="text-2xl font-bold mb-4">Your Digital Journey Complete!</h3>

            <div className="bg-white rounded-xl p-6 shadow-lg mb-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div className="text-center">
                  <div className={`text-3xl font-bold ${getReputationColor()}`}>
                    {reputation}
                  </div>
                  <div className="text-sm text-gray-600">Final Reputation</div>
                </div>
                <div className="text-center">
                  <div className={`text-3xl font-bold ${getFootprintColor()}`}>
                    {digitalFootprint.toUpperCase()}
                  </div>
                  <div className="text-sm text-gray-600">Digital Footprint</div>
                </div>
                <div className="text-center">
                  <div className="text-3xl font-bold text-purple-600">
                    {unlockedOpportunities.length}
                  </div>
                  <div className="text-sm text-gray-600">Opportunities Unlocked</div>
                </div>
              </div>

              <div className="mb-6">
                <h4 className="font-bold mb-2">Your Journey Log:</h4>
                <div className="bg-gray-50 rounded-lg p-4 max-h-40 overflow-y-auto">
                  {gameLog.map((entry, idx) => (
                    <div key={idx} className="text-sm text-gray-700 mb-1">
                      {entry}
                    </div>
                  ))}
                </div>
              </div>

              {reputation >= 70 && unlockedOpportunities.length >= 2 && (
                <div className="text-green-700 font-bold text-xl mb-4">
                  üéâ Excellent! You've mastered digital citizenship!
                </div>
              )}
              {reputation < 40 && (
                <div className="text-red-700 font-bold text-xl mb-4">
                  üòî Your digital footprint needs more careful management.
                </div>
              )}
            </div>

            <button
              onClick={onClose}
              className="bg-purple-600 text-white font-bold py-3 px-8 rounded-full hover:bg-purple-700 transition-all"
            >
              Close Game
            </button>
          </div>
        )}
      </div>
    </div>
  );
}

const GamesPage = () => {
  const [showQuiz, setShowQuiz] = useState(false);
  const [showAgentGame, setShowAgentGame] = useState(false);
  const [showDigitalFootprintGame, setShowDigitalFootprintGame] = useState(false);
  const [showCyberHeroRPG, setShowCyberHeroRPG] = useState(false);
  return (
    <>
      <Helmet>
        <title>Games Library | Cyber Quest</title>
        <meta
          name="description"
          content="Explore our collection of fun educational games designed to make learning exciting for grades K-6."
        />
      </Helmet>
      <HeaderDashboard/>
      <div className="pt-24 pb-16 bg-gradient-to-br from-pink-50 via-blue-50 to-purple-50 relative overflow-hidden">
        <div className="container mx-auto px-4 relative z-10">
          <h1 className="font-fredoka text-4xl md:text-5xl text-center mb-6">
            <span className="bg-gradient-to-r from-primary via-purple-500 to-yellow-500 bg-clip-text text-transparent">
              Games Library
            </span>
          </h1>
          <p className="text-gray-700 text-lg text-center max-w-2xl mx-auto mb-10">
            Explore our collection of interactive educational games designed to
            make learning fun while building essential skills.
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {/* Junior Agent Game Card */}
            <div className="bg-gradient-to-br from-yellow-200 via-blue-100 to-pink-100 rounded-3xl shadow-lg p-8 flex flex-col items-center justify-center cursor-pointer hover:scale-105 transition-transform" onClick={() => setShowAgentGame(true)}>
              <img src="/quiz-icon.svg" alt="Agent Game Icon" className="w-16 h-16 mb-4" />
              <h3 className="text-2xl font-bold text-yellow-700 mb-2">Junior Agent: Spot the Scam!</h3>
              <p className="text-gray-700 text-center mb-2">Analyze digital messages and highlight suspicious elements to earn a high Trust Score!</p>
              <Button className="bg-yellow-500 text-white font-bold px-6 py-2 rounded-full mt-2">Play Game</Button>
            </div>
            {/* Cyber Safety Quiz Card */}
            <div className="bg-gradient-to-br from-purple-200 via-blue-100 to-pink-100 rounded-3xl shadow-lg p-8 flex flex-col items-center justify-center cursor-pointer hover:scale-105 transition-transform" onClick={() => setShowQuiz(true)}>
              <img src="/quiz-icon.svg" alt="Quiz Icon" className="w-16 h-16 mb-4" />
              <h3 className="text-2xl font-bold text-purple-700 mb-2">Cyber Safety Quiz</h3>
              <p className="text-gray-700 text-center mb-2">Test your cyber safety skills and earn your star!</p>
              <Button className="bg-purple-600 text-white font-bold px-6 py-2 rounded-full mt-2">Play Quiz</Button>
            </div>
            {/* Digital Footprint Game Card */}
            <div className="bg-gradient-to-br from-green-200 via-blue-100 to-purple-100 rounded-3xl shadow-lg p-8 flex flex-col items-center justify-center cursor-pointer hover:scale-105 transition-transform" onClick={() => setShowDigitalFootprintGame(true)}>
              <div className="w-16 h-16 bg-white rounded-full flex items-center justify-center mb-4">
                <Shield className="w-8 h-8 text-green-600" />
              </div>
              <h3 className="text-2xl font-bold text-green-700 mb-2">Digital Footprint Adventure</h3>
              <p className="text-gray-700 text-center mb-2">Manage your online presence and build a positive digital footprint over 3 years!</p>
              <Button className="bg-green-600 text-white font-bold px-6 py-2 rounded-full mt-2">Play Game</Button>
            </div>
            {/* Cyber Hero RPG Game Card */}
            <div className="bg-gradient-to-br from-red-200 via-purple-100 to-blue-100 rounded-3xl shadow-lg p-8 flex flex-col items-center justify-center cursor-pointer hover:scale-105 transition-transform" onClick={() => setShowCyberHeroRPG(true)}>
              <div className="w-16 h-16 bg-white rounded-full flex items-center justify-center mb-4">
                <Sword className="w-8 h-8 text-red-600" />
              </div>
              <h3 className="text-2xl font-bold text-red-700 mb-2">Cyber Hero RPG</h3>
              <p className="text-gray-700 text-center mb-2">Embark on an epic quest to combat cyberbullying across digital realms!</p>
              <Button className="bg-red-600 text-white font-bold px-6 py-2 rounded-full mt-2">Play Game</Button>
            </div>
          </div>
        </div>
      </div>
      {showAgentGame && <AgentGameModal onClose={() => setShowAgentGame(false)} />}
      {showQuiz && <Quizz onClose={() => setShowQuiz(false)} />}
      {showDigitalFootprintGame && <DigitalFootprintGameModal onClose={() => setShowDigitalFootprintGame(false)} />}
      {showCyberHeroRPG && <CyberHeroRPG onClose={() => setShowCyberHeroRPG(false)} />}
    </>
  );
};

export default GamesPage;
